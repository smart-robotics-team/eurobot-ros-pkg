// ROS message includes
#include "ros/ros.h"
#include <sensor_msgs/PointCloud2.h>
#include <sensor_msgs/LaserScan.h>

/* protected region user include files on begin */
#include <tf/transform_listener.h>
#include <laser_geometry/laser_geometry.h>

#include <pcl/point_types.h>
#include <pcl/io/io.h>
#include <pcl/io/pcd_io.h>
#include <pcl/filters/passthrough.h>
#include <pcl/filters/crop_box.h>
#include <pcl/filters/extract_indices.h>
#include <pcl/filters/voxel_grid.h>
#include <pcl/filters/statistical_outlier_removal.h>
#include <pcl/ModelCoefficients.h>
#include <pcl/features/normal_3d.h>
#include <pcl/kdtree/kdtree.h>
#include <pcl/sample_consensus/method_types.h>
#include <pcl/sample_consensus/model_types.h>
#include <pcl/sample_consensus/ransac.h>
#include <pcl/sample_consensus/sac_model_plane.h>
#include <pcl/segmentation/sac_segmentation.h>
#include <pcl/segmentation/extract_clusters.h>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl_ros/transforms.h>

#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>

#include <stdio.h>                                         // for in-/output
#include <string.h>                                        // strcat

//Include system headers
#include <cstring>
#include <iostream>
#include <cstdio>

#include <sstream>
#include <math.h>
#include <vector>

/* protected region user include files end */

class beacon_pt_filter_config
{
public:
    double x_min;
    double x_max;
    double y_min;
    double y_max;
    std::string world_frame_id;
};

class beacon_pt_filter_data
{
// autogenerated: don't touch this class
public:
    //input data
    sensor_msgs::LaserScan in_input;
    //output data
    sensor_msgs::PointCloud2 out_output;
    bool out_output_active;
};

class beacon_pt_filter_impl
{
    /* protected region user member variables on begin */
	beacon_pt_filter_config localconfig;

	laser_geometry::LaserProjection projector_;
	tf::TransformListener tfListener_;

	sensor_msgs::PointCloud2 pc2;
	bool output_ready;
    /* protected region user member variables end */

public:
    beacon_pt_filter_impl() 
    {
        /* protected region user constructor on begin */
    	output_ready = false;
        /* protected region user constructor end */
    }

    void configure(beacon_pt_filter_config config) 
    {
        /* protected region user configure on begin */
    	localconfig = config;
        /* protected region user configure end */
    }

    void update(beacon_pt_filter_data &data, beacon_pt_filter_config config)
    {
        /* protected region user update on begin */
    	data.out_output_active = output_ready;
    	if(output_ready)
    	{
    		data.out_output = pc2;
    		output_ready = false;
    	}
        /* protected region user update end */
    }

    void topicCallback_input(const sensor_msgs::LaserScan::ConstPtr& msg)
    {
        /* protected region user implementation of subscribe callback for input on begin */
        sensor_msgs::PointCloud2 cloud;
        pcl::PCLPointCloud2::Ptr pcl_pc(new pcl::PCLPointCloud2 ());
        pcl::PointCloud<pcl::PointXYZ>::Ptr pcl_cloud (new pcl::PointCloud<pcl::PointXYZ>);
        pcl::PointCloud<pcl::PointXYZ>::Ptr final (new pcl::PointCloud<pcl::PointXYZ>);
        pcl::PCLPointCloud2::Ptr cloud_out (new pcl::PCLPointCloud2 ());



    	if(!tfListener_.waitForTransform(msg->header.frame_id, localconfig.world_frame_id, msg->header.stamp + ros::Duration().fromSec(msg->ranges.size()*msg->time_increment),
    	        ros::Duration(1.0))){
    	    //std::cout << "a0" << std::endl;
    	     return;
    	}

    	projector_.transformLaserScanToPointCloud(localconfig.world_frame_id, *msg, cloud, tfListener_);

    	// Transformation into PCL type PointCloud2
    	pcl_conversions::toPCL((cloud), *(pcl_pc));

    	// Transformation into PCL type PointCloud<pcl::PointXYZRGB>
    	pcl::fromPCLPointCloud2(*(pcl_pc), *(pcl_cloud));


    	////////////////////////
    	// PassThrough filter //
    	////////////////////////
    	pcl::PassThrough<pcl::PointXYZ> pass;
    	pass.setInputCloud (pcl_cloud);
    	pass.setFilterFieldName ("x");
    	pass.setFilterLimits (localconfig.x_min, localconfig.x_max);
    	//pass.setFilterLimitsNegative (true);
    	pass.filter (*final);

    	pass.setInputCloud (final);
    	pass.setFilterFieldName ("y");
    	pass.setFilterLimits (localconfig.y_min, localconfig.y_max);
    	//pass.setFilterLimitsNegative (true);
    	pass.filter (*final);

    	// Transformation into ROS type
    	pcl::toPCLPointCloud2(*(final), *(cloud_out));
    	pcl_conversions::moveFromPCL(*(cloud_out), pc2);

    	output_ready = true;

    	/* protected region user implementation of subscribe callback for input end */
    }



    /* protected region user additional functions on begin */
    /* protected region user additional functions end */
};
